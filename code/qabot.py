from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA

import gradio as gr

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

## LLM
def get_llm():
    model_id = 'mistralai/mixtral-8x7b-instruct-v01'
    parameters = {
        "temperature": 0.5,
        "max_new_tokens": 256
    }
    project_id = "skills-network"
    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url="https://us-south.ml.cloud.ibm.com",
        project_id=project_id,
        params=parameters,
    )
    return watsonx_llm


## Document loader
def document_loader(file):
    loader = PyPDFLoader(file.name)
    loaded_document = loader.load()
    return loaded_document

## Text splitter
def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks

## Embedding model
def watsonx_embedding():
    embed_params = {
        "truncate": "right",
        "max_seq_length": 512,
    }
    watsonx_embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        url="https://us-south.ml.cloud.ibm.com",
        project_id="skills-network",
        params=embed_params,
    )
    return watsonx_embedding

## Vector db
def vector_database(chunks):
    embedding_model = watsonx_embedding()
    vectordb = Chroma.from_documents(
        documents=chunks,
        embedding=embedding_model
    )
    return vectordb

## Retriever
def retriever(file):
    splits = document_loader(file)          # Load the PDF into document chunks
    chunks = text_splitter(splits)          # Split the loaded document into smaller text chunks
    vectordb = vector_database(chunks)      # Store the chunks in the vector database
    retriever = vectordb.as_retriever()     # Create a retriever from the vector DB
    return retriever

## QA Chain
def retriever_qa(file, query):
    llm = get_llm()
    retriever_obj = retriever(file)
    qa = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",                # typical for most RAG QA use-cases
        retriever=retriever_obj,
        return_source_documents=True        # returns source docs with the answer
    )
    response = qa.invoke({"query": query}) # call the QA chain
    return response['result']              # return only the answer

# Create Gradio interface
rag_application = gr.Interface(
    fn=retriever_qa,                      # function to run on submit
    allow_flagging='never',               # disables user flagging (optional, can also use "manual" if you want)
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),
        gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="Answer"),   # output answer textbox
    title="LangChain QA Bot",
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the document and an LLM."
)

# Launch the app
rag_application.launch(server_name="0.0.0.0", server_port=7860)

